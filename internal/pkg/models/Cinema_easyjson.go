// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels(in *jlexer.Lexer, out *TicketPlace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Row":
			out.Row = int(in.Int())
		case "Place":
			out.Place = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels(out *jwriter.Writer, in TicketPlace) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Row\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Row))
	}
	{
		const prefix string = ",\"Place\":"
		out.RawString(prefix)
		out.Int(int(in.Place))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TicketPlace) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TicketPlace) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TicketPlace) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TicketPlace) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels(l, v)
}
func easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels1(in *jlexer.Lexer, out *TicketInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Login":
			out.Login = string(in.String())
		case "ScheduleID":
			out.ScheduleID = uint64(in.Uint64())
		case "PlaceField":
			(out.PlaceField).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels1(out *jwriter.Writer, in TicketInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"ScheduleID\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ScheduleID))
	}
	{
		const prefix string = ",\"PlaceField\":"
		out.RawString(prefix)
		(in.PlaceField).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TicketInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TicketInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TicketInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TicketInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels1(l, v)
}
func easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels2(in *jlexer.Lexer, out *Ticket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "Login":
			out.Login = string(in.String())
		case "Schedule":
			easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels3(in, &out.Schedule)
		case "TransactionDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TransactionDate).UnmarshalJSON(data))
			}
		case "PlaceField":
			(out.PlaceField).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels2(out *jwriter.Writer, in Ticket) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"Login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"Schedule\":"
		out.RawString(prefix)
		easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels3(out, in.Schedule)
	}
	{
		const prefix string = ",\"TransactionDate\":"
		out.RawString(prefix)
		out.Raw((in.TransactionDate).MarshalJSON())
	}
	{
		const prefix string = ",\"PlaceField\":"
		out.RawString(prefix)
		(in.PlaceField).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ticket) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ticket) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ticket) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ticket) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels2(l, v)
}
func easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels3(in *jlexer.Lexer, out *Schedule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "MovieID":
			out.MovieID = uint64(in.Uint64())
		case "CinemaID":
			out.CinemaID = uint64(in.Uint64())
		case "HallID":
			out.HallID = uint64(in.Uint64())
		case "PremierTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PremierTime).UnmarshalJSON(data))
			}
		case "Cost":
			out.Cost = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels3(out *jwriter.Writer, in Schedule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"MovieID\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.MovieID))
	}
	{
		const prefix string = ",\"CinemaID\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CinemaID))
	}
	{
		const prefix string = ",\"HallID\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.HallID))
	}
	{
		const prefix string = ",\"PremierTime\":"
		out.RawString(prefix)
		out.Raw((in.PremierTime).MarshalJSON())
	}
	{
		const prefix string = ",\"Cost\":"
		out.RawString(prefix)
		out.Int(int(in.Cost))
	}
	out.RawByte('}')
}
func easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels4(in *jlexer.Lexer, out *SearchCinema) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels4(out *jwriter.Writer, in SearchCinema) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchCinema) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchCinema) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchCinema) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchCinema) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels4(l, v)
}
func easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels5(in *jlexer.Lexer, out *HallPlace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Place":
			out.Place = int(in.Int())
		case "Row":
			out.Row = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels5(out *jwriter.Writer, in HallPlace) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Place\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Place))
	}
	{
		const prefix string = ",\"Row\":"
		out.RawString(prefix)
		out.Int(int(in.Row))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HallPlace) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HallPlace) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HallPlace) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HallPlace) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels5(l, v)
}
func easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels6(in *jlexer.Lexer, out *HallConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Levels":
			if in.IsNull() {
				in.Skip()
				out.Levels = nil
			} else {
				in.Delim('[')
				if out.Levels == nil {
					if !in.IsDelim(']') {
						out.Levels = make([]HallPlace, 0, 4)
					} else {
						out.Levels = []HallPlace{}
					}
				} else {
					out.Levels = (out.Levels)[:0]
				}
				for !in.IsDelim(']') {
					var v1 HallPlace
					(v1).UnmarshalEasyJSON(in)
					out.Levels = append(out.Levels, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels6(out *jwriter.Writer, in HallConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Levels\":"
		out.RawString(prefix[1:])
		if in.Levels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Levels {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HallConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HallConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HallConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HallConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels6(l, v)
}
func easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels7(in *jlexer.Lexer, out *GetCinemaList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Limit":
			out.Limit = int(in.Int())
		case "Page":
			out.Page = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels7(out *jwriter.Writer, in GetCinemaList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Limit\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Limit))
	}
	{
		const prefix string = ",\"Page\":"
		out.RawString(prefix)
		out.Int(int(in.Page))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetCinemaList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCinemaList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCinemaList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCinemaList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels7(l, v)
}
func easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels8(in *jlexer.Lexer, out *CinemaHall) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "PlaceAmount":
			out.PlaceAmount = int(in.Int())
		case "PlaceConfig":
			(out.PlaceConfig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels8(out *jwriter.Writer, in CinemaHall) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"PlaceAmount\":"
		out.RawString(prefix)
		out.Int(int(in.PlaceAmount))
	}
	{
		const prefix string = ",\"PlaceConfig\":"
		out.RawString(prefix)
		(in.PlaceConfig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CinemaHall) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CinemaHall) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CinemaHall) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CinemaHall) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels8(l, v)
}
func easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels9(in *jlexer.Lexer, out *Cinema) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "Name":
			out.Name = string(in.String())
		case "Address":
			out.Address = string(in.String())
		case "HallCount":
			out.HallCount = int(in.Int())
		case "PathToAvatar":
			out.PathToAvatar = string(in.String())
		case "AuthorID":
			out.AuthorID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels9(out *jwriter.Writer, in Cinema) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"HallCount\":"
		out.RawString(prefix)
		out.Int(int(in.HallCount))
	}
	{
		const prefix string = ",\"PathToAvatar\":"
		out.RawString(prefix)
		out.String(string(in.PathToAvatar))
	}
	{
		const prefix string = ",\"AuthorID\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AuthorID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cinema) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cinema) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316958ddEncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cinema) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cinema) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316958ddDecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels9(l, v)
}
