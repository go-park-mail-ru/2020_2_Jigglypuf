// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson16e76531DecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels(in *jlexer.Lexer, out *ProfileFormData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Surname":
			out.Surname = string(in.String())
		case "Avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16e76531EncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels(out *jwriter.Writer, in ProfileFormData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Surname\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	{
		const prefix string = ",\"Avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileFormData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16e76531EncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileFormData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16e76531EncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileFormData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16e76531DecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileFormData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16e76531DecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels(l, v)
}
func easyjson16e76531DecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels1(in *jlexer.Lexer, out *Profile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserCredentials":
			if in.IsNull() {
				in.Skip()
				out.UserCredentials = nil
			} else {
				if out.UserCredentials == nil {
					out.UserCredentials = new(User)
				}
				easyjson16e76531DecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels2(in, out.UserCredentials)
			}
		case "Name":
			out.Name = string(in.String())
		case "Surname":
			out.Surname = string(in.String())
		case "AvatarPath":
			out.AvatarPath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16e76531EncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels1(out *jwriter.Writer, in Profile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserCredentials\":"
		out.RawString(prefix[1:])
		if in.UserCredentials == nil {
			out.RawString("null")
		} else {
			easyjson16e76531EncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels2(out, *in.UserCredentials)
		}
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Surname\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	{
		const prefix string = ",\"AvatarPath\":"
		out.RawString(prefix)
		out.String(string(in.AvatarPath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Profile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16e76531EncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Profile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16e76531EncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Profile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16e76531DecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Profile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16e76531DecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels1(l, v)
}
func easyjson16e76531DecodeGithubComGoParkMailRu20202JigglypufInternalPkgModels2(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Login":
			out.Login = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16e76531EncodeGithubComGoParkMailRu20202JigglypufInternalPkgModels2(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Login\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Login))
	}
	out.RawByte('}')
}
