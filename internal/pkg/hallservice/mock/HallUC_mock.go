// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	models "backend/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CheckAvailability mocks base method
func (m *MockUseCase) CheckAvailability(hallID string, place *models.TicketPlace) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAvailability", hallID, place)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAvailability indicates an expected call of CheckAvailability
func (mr *MockUseCaseMockRecorder) CheckAvailability(hallID, place interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAvailability", reflect.TypeOf((*MockUseCase)(nil).CheckAvailability), hallID, place)
}

// GetHallStructure mocks base method
func (m *MockUseCase) GetHallStructure(hallID string) (*models.CinemaHall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHallStructure", hallID)
	ret0, _ := ret[0].(*models.CinemaHall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHallStructure indicates an expected call of GetHallStructure
func (mr *MockUseCaseMockRecorder) GetHallStructure(hallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHallStructure", reflect.TypeOf((*MockUseCase)(nil).GetHallStructure), hallID)
}
