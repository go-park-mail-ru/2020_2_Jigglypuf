// Code generated by MockGen. DO NOT EDIT.
// Source: ProfileUseCase.go

// Package mock is a generated GoMock package.
package mock

import (
	models "github.com/go-park-mail-ru/2020_2_Jigglypuf/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method
func (m *MockUseCase) CreateProfile(profile *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile
func (mr *MockUseCaseMockRecorder) CreateProfile(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockUseCase)(nil).CreateProfile), profile)
}

// DeleteProfile mocks base method
func (m *MockUseCase) DeleteProfile(profile *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfile indicates an expected call of DeleteProfile
func (mr *MockUseCaseMockRecorder) DeleteProfile(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockUseCase)(nil).DeleteProfile), profile)
}

// GetProfile mocks base method
func (m *MockUseCase) GetProfile(login *string) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", login)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockUseCaseMockRecorder) GetProfile(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockUseCase)(nil).GetProfile), login)
}

// UpdateCredentials mocks base method
func (m *MockUseCase) UpdateCredentials(profile *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredentials", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCredentials indicates an expected call of UpdateCredentials
func (mr *MockUseCaseMockRecorder) UpdateCredentials(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentials", reflect.TypeOf((*MockUseCase)(nil).UpdateCredentials), profile)
}

// UpdateProfile mocks base method
func (m *MockUseCase) UpdateProfile(profileUserID uint64, name, surname, avatarPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", profileUserID, name, surname, avatarPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockUseCaseMockRecorder) UpdateProfile(profileUserID, name, surname, avatarPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUseCase)(nil).UpdateProfile), profileUserID, name, surname, avatarPath)
}

// GetProfileViaID mocks base method
func (m *MockUseCase) GetProfileViaID(userID uint64) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileViaID", userID)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileViaID indicates an expected call of GetProfileViaID
func (mr *MockUseCaseMockRecorder) GetProfileViaID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileViaID", reflect.TypeOf((*MockUseCase)(nil).GetProfileViaID), userID)
}
