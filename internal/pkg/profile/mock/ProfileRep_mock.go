// Code generated by MockGen. DO NOT EDIT.
// Source: ProfileRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	models "backend/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interfaces
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method
func (m *MockRepository) CreateProfile(profile *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile
func (mr *MockRepositoryMockRecorder) CreateProfile(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockRepository)(nil).CreateProfile), profile)
}

// DeleteProfile mocks base method
func (m *MockRepository) DeleteProfile(profile *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfile indicates an expected call of DeleteProfile
func (mr *MockRepositoryMockRecorder) DeleteProfile(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockRepository)(nil).DeleteProfile), profile)
}

// GetProfile mocks base method
func (m *MockRepository) GetProfile(login *string) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", login)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockRepositoryMockRecorder) GetProfile(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockRepository)(nil).GetProfile), login)
}

// UpdateCredentials mocks base method
func (m *MockRepository) UpdateCredentials(profile *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredentials", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCredentials indicates an expected call of UpdateCredentials
func (mr *MockRepositoryMockRecorder) UpdateCredentials(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentials", reflect.TypeOf((*MockRepository)(nil).UpdateCredentials), profile)
}

// UpdateProfile mocks base method
func (m *MockRepository) UpdateProfile(profile *models.Profile, name, surname, avatarPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", profile, name, surname, avatarPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockRepositoryMockRecorder) UpdateProfile(profile, name, surname, avatarPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockRepository)(nil).UpdateProfile), profile, name, surname, avatarPath)
}

// GetProfileViaID mocks base method
func (m *MockRepository) GetProfileViaID(userID uint64) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileViaID", userID)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileViaID indicates an expected call of GetProfileViaID
func (mr *MockRepositoryMockRecorder) GetProfileViaID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileViaID", reflect.TypeOf((*MockRepository)(nil).GetProfileViaID), userID)
}
