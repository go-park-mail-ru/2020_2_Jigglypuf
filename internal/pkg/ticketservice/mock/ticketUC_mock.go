// Code generated by MockGen. DO NOT EDIT.
// Source: TicketUseCase.go

// Package mock is a generated GoMock package.
package mock

import (
	models "github.com/go-park-mail-ru/2020_2_Jigglypuf/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// BuyTicket mocks base method
func (m *MockUseCase) BuyTicket(ticket *models.TicketInput, userID interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyTicket", ticket, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyTicket indicates an expected call of BuyTicket
func (mr *MockUseCaseMockRecorder) BuyTicket(ticket, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyTicket", reflect.TypeOf((*MockUseCase)(nil).BuyTicket), ticket, userID)
}

// GetHallScheduleTickets mocks base method
func (m *MockUseCase) GetHallScheduleTickets(scheduleID string) (*[]models.TicketPlace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHallScheduleTickets", scheduleID)
	ret0, _ := ret[0].(*[]models.TicketPlace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHallScheduleTickets indicates an expected call of GetHallScheduleTickets
func (mr *MockUseCaseMockRecorder) GetHallScheduleTickets(scheduleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHallScheduleTickets", reflect.TypeOf((*MockUseCase)(nil).GetHallScheduleTickets), scheduleID)
}

// GetSimpleTicket mocks base method
func (m *MockUseCase) GetSimpleTicket(userID uint64, ticketID string) (*models.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimpleTicket", userID, ticketID)
	ret0, _ := ret[0].(*models.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSimpleTicket indicates an expected call of GetSimpleTicket
func (mr *MockUseCaseMockRecorder) GetSimpleTicket(userID, ticketID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimpleTicket", reflect.TypeOf((*MockUseCase)(nil).GetSimpleTicket), userID, ticketID)
}

// GetUserTickets mocks base method
func (m *MockUseCase) GetUserTickets(userID uint64) (*[]models.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTickets", userID)
	ret0, _ := ret[0].(*[]models.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTickets indicates an expected call of GetUserTickets
func (mr *MockUseCaseMockRecorder) GetUserTickets(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTickets", reflect.TypeOf((*MockUseCase)(nil).GetUserTickets), userID)
}

// GetTicketByTransaction mocks base method
func (m *MockUseCase) GetTicketByTransaction(transaction string) (*models.TicketInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketByTransaction", transaction)
	ret0, _ := ret[0].(*models.TicketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketByTransaction indicates an expected call of GetTicketByTransaction
func (mr *MockUseCaseMockRecorder) GetTicketByTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketByTransaction", reflect.TypeOf((*MockUseCase)(nil).GetTicketByTransaction), transaction)
}
