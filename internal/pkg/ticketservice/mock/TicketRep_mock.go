// Code generated by MockGen. DO NOT EDIT.
// Source: TicketRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	models "github.com/go-park-mail-ru/2020_2_Jigglypuf/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateTicket mocks base method
func (m *MockRepository) CreateTicket(ticket *models.TicketInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ticket)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTicket indicates an expected call of CreateTicket
func (mr *MockRepositoryMockRecorder) CreateTicket(ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockRepository)(nil).CreateTicket), ticket)
}

// GetSimpleTicket mocks base method
func (m *MockRepository) GetSimpleTicket(ticketID uint64, Login string) (*models.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimpleTicket", ticketID, Login)
	ret0, _ := ret[0].(*models.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSimpleTicket indicates an expected call of GetSimpleTicket
func (mr *MockRepositoryMockRecorder) GetSimpleTicket(ticketID, Login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimpleTicket", reflect.TypeOf((*MockRepository)(nil).GetSimpleTicket), ticketID, Login)
}

// GetUserTickets mocks base method
func (m *MockRepository) GetUserTickets(Login string) (*[]models.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTickets", Login)
	ret0, _ := ret[0].(*[]models.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTickets indicates an expected call of GetUserTickets
func (mr *MockRepositoryMockRecorder) GetUserTickets(Login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTickets", reflect.TypeOf((*MockRepository)(nil).GetUserTickets), Login)
}

// GetHallTickets mocks base method
func (m *MockRepository) GetHallTickets(scheduleID uint64) (*[]models.TicketPlace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHallTickets", scheduleID)
	ret0, _ := ret[0].(*[]models.TicketPlace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHallTickets indicates an expected call of GetHallTickets
func (mr *MockRepositoryMockRecorder) GetHallTickets(scheduleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHallTickets", reflect.TypeOf((*MockRepository)(nil).GetHallTickets), scheduleID)
}

// GetTicketByTransaction mocks base method
func (m *MockRepository) GetTicketByTransaction(transaction string) (*models.TicketInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketByTransaction", transaction)
	ret0, _ := ret[0].(*models.TicketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketByTransaction indicates an expected call of GetTicketByTransaction
func (mr *MockRepositoryMockRecorder) GetTicketByTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketByTransaction", reflect.TypeOf((*MockRepository)(nil).GetTicketByTransaction), transaction)
}
