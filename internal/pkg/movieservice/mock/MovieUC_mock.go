// Code generated by MockGen. DO NOT EDIT.
// Source: movieUseCase.go

// Package mock is a generated GoMock package.
package mock

import (
	models "github.com/go-park-mail-ru/2020_2_Jigglypuf/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMovieUseCase is a mock of MovieUseCase interface
type MockMovieUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockMovieUseCaseMockRecorder
}

// MockMovieUseCaseMockRecorder is the mock recorder for MockMovieUseCase
type MockMovieUseCaseMockRecorder struct {
	mock *MockMovieUseCase
}

// NewMockMovieUseCase creates a new mock instance
func NewMockMovieUseCase(ctrl *gomock.Controller) *MockMovieUseCase {
	mock := &MockMovieUseCase{ctrl: ctrl}
	mock.recorder = &MockMovieUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieUseCase) EXPECT() *MockMovieUseCaseMockRecorder {
	return m.recorder
}

// GetMovie mocks base method
func (m *MockMovieUseCase) GetMovie(id uint64, isAuth bool, userID uint64) (*models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", id, isAuth, userID)
	ret0, _ := ret[0].(*models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie
func (mr *MockMovieUseCaseMockRecorder) GetMovie(id, isAuth, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockMovieUseCase)(nil).GetMovie), id, isAuth, userID)
}

// GetMovieList mocks base method
func (m *MockMovieUseCase) GetMovieList(limit, page int) (*[]models.MovieList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieList", limit, page)
	ret0, _ := ret[0].(*[]models.MovieList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieList indicates an expected call of GetMovieList
func (mr *MockMovieUseCaseMockRecorder) GetMovieList(limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieList", reflect.TypeOf((*MockMovieUseCase)(nil).GetMovieList), limit, page)
}

// CreateMovie mocks base method
func (m *MockMovieUseCase) CreateMovie(movie *models.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMovie indicates an expected call of CreateMovie
func (mr *MockMovieUseCaseMockRecorder) CreateMovie(movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieUseCase)(nil).CreateMovie), movie)
}

// UpdateMovie mocks base method
func (m *MockMovieUseCase) UpdateMovie(movie *models.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie
func (mr *MockMovieUseCaseMockRecorder) UpdateMovie(movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovieUseCase)(nil).UpdateMovie), movie)
}

// RateMovie mocks base method
func (m *MockMovieUseCase) RateMovie(userID, id uint64, rating int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateMovie", userID, id, rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// RateMovie indicates an expected call of RateMovie
func (mr *MockMovieUseCaseMockRecorder) RateMovie(userID, id, rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateMovie", reflect.TypeOf((*MockMovieUseCase)(nil).RateMovie), userID, id, rating)
}

// GetRating mocks base method
func (m *MockMovieUseCase) GetRating(user *models.User, id uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRating", user, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRating indicates an expected call of GetRating
func (mr *MockMovieUseCaseMockRecorder) GetRating(user, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRating", reflect.TypeOf((*MockMovieUseCase)(nil).GetRating), user, id)
}

// GetMoviesInCinema mocks base method
func (m *MockMovieUseCase) GetMoviesInCinema(limit, page int) (*[]models.MovieList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesInCinema", limit, page)
	ret0, _ := ret[0].(*[]models.MovieList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoviesInCinema indicates an expected call of GetMoviesInCinema
func (mr *MockMovieUseCaseMockRecorder) GetMoviesInCinema(limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesInCinema", reflect.TypeOf((*MockMovieUseCase)(nil).GetMoviesInCinema), limit, page)
}
