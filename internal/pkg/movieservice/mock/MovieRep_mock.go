// Code generated by MockGen. DO NOT EDIT.
// Source: movieRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	models "github.com/go-park-mail-ru/2020_2_Jigglypuf/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMovieRepository is a mock of MovieRepository interface
type MockMovieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepositoryMockRecorder
}

// MockMovieRepositoryMockRecorder is the mock recorder for MockMovieRepository
type MockMovieRepositoryMockRecorder struct {
	mock *MockMovieRepository
}

// NewMockMovieRepository creates a new mock instance
func NewMockMovieRepository(ctrl *gomock.Controller) *MockMovieRepository {
	mock := &MockMovieRepository{ctrl: ctrl}
	mock.recorder = &MockMovieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieRepository) EXPECT() *MockMovieRepositoryMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method
func (m *MockMovieRepository) CreateMovie(arg0 *models.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMovie indicates an expected call of CreateMovie
func (mr *MockMovieRepositoryMockRecorder) CreateMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieRepository)(nil).CreateMovie), arg0)
}

// UpdateMovie mocks base method
func (m *MockMovieRepository) UpdateMovie(arg0 *models.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie
func (mr *MockMovieRepositoryMockRecorder) UpdateMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovieRepository)(nil).UpdateMovie), arg0)
}

// GetMovie mocks base method
func (m *MockMovieRepository) GetMovie(id uint64) (*models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", id)
	ret0, _ := ret[0].(*models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie
func (mr *MockMovieRepositoryMockRecorder) GetMovie(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockMovieRepository)(nil).GetMovie), id)
}

// GetMovieList mocks base method
func (m *MockMovieRepository) GetMovieList(limit, page int) (*[]models.MovieList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieList", limit, page)
	ret0, _ := ret[0].(*[]models.MovieList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieList indicates an expected call of GetMovieList
func (mr *MockMovieRepositoryMockRecorder) GetMovieList(limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieList", reflect.TypeOf((*MockMovieRepository)(nil).GetMovieList), limit, page)
}

// RateMovie mocks base method
func (m *MockMovieRepository) RateMovie(user *models.User, id uint64, rating int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateMovie", user, id, rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// RateMovie indicates an expected call of RateMovie
func (mr *MockMovieRepositoryMockRecorder) RateMovie(user, id, rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateMovie", reflect.TypeOf((*MockMovieRepository)(nil).RateMovie), user, id, rating)
}

// GetRating mocks base method
func (m *MockMovieRepository) GetRating(userID, id uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRating", userID, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRating indicates an expected call of GetRating
func (mr *MockMovieRepositoryMockRecorder) GetRating(userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRating", reflect.TypeOf((*MockMovieRepository)(nil).GetRating), userID, id)
}

// UpdateMovieRating mocks base method
func (m *MockMovieRepository) UpdateMovieRating(movieID uint64, ratingScore int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovieRating", movieID, ratingScore)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovieRating indicates an expected call of UpdateMovieRating
func (mr *MockMovieRepositoryMockRecorder) UpdateMovieRating(movieID, ratingScore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovieRating", reflect.TypeOf((*MockMovieRepository)(nil).UpdateMovieRating), movieID, ratingScore)
}

// GetMoviesInCinema mocks base method
func (m *MockMovieRepository) GetMoviesInCinema(limit, page int, date string) (*[]models.MovieList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesInCinema", limit, page, date)
	ret0, _ := ret[0].(*[]models.MovieList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoviesInCinema indicates an expected call of GetMoviesInCinema
func (mr *MockMovieRepositoryMockRecorder) GetMoviesInCinema(limit, page, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesInCinema", reflect.TypeOf((*MockMovieRepository)(nil).GetMoviesInCinema), limit, page, date)
}
