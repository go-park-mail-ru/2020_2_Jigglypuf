// Code generated by MockGen. DO NOT EDIT.
// Source: CinemaRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	models "backend/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interfaces
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateCinema mocks base method
func (m *MockRepository) CreateCinema(cinema *models.Cinema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCinema", cinema)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCinema indicates an expected call of CreateCinema
func (mr *MockRepositoryMockRecorder) CreateCinema(cinema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCinema", reflect.TypeOf((*MockRepository)(nil).CreateCinema), cinema)
}

// GetCinema mocks base method
func (m *MockRepository) GetCinema(id uint64) (*models.Cinema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCinema", id)
	ret0, _ := ret[0].(*models.Cinema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCinema indicates an expected call of GetCinema
func (mr *MockRepositoryMockRecorder) GetCinema(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCinema", reflect.TypeOf((*MockRepository)(nil).GetCinema), id)
}

// GetCinemaList mocks base method
func (m *MockRepository) GetCinemaList(limit, page int) (*[]models.Cinema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCinemaList", limit, page)
	ret0, _ := ret[0].(*[]models.Cinema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCinemaList indicates an expected call of GetCinemaList
func (mr *MockRepositoryMockRecorder) GetCinemaList(limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCinemaList", reflect.TypeOf((*MockRepository)(nil).GetCinemaList), limit, page)
}

// UpdateCinema mocks base method
func (m *MockRepository) UpdateCinema(cinema *models.Cinema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCinema", cinema)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCinema indicates an expected call of UpdateCinema
func (mr *MockRepositoryMockRecorder) UpdateCinema(cinema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCinema", reflect.TypeOf((*MockRepository)(nil).UpdateCinema), cinema)
}

// DeleteCinema mocks base method
func (m *MockRepository) DeleteCinema(cinema *models.Cinema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCinema", cinema)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCinema indicates an expected call of DeleteCinema
func (mr *MockRepositoryMockRecorder) DeleteCinema(cinema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCinema", reflect.TypeOf((*MockRepository)(nil).DeleteCinema), cinema)
}
